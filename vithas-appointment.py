# Generated by Selenium IDE
import sys
import pytest
import time
import json
import subprocess
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import yaml

CHROME_DRIVER_LOCATION = "/home/rmartinez/ProgramFiles/chromedriver/chromedriver";
DEFAULT_WAIT_MILLIS = 3000000


class VithasBot():
  def __init__(self, config):
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    self.driver = webdriver.Chrome(CHROME_DRIVER_LOCATION, options=chrome_options)
    self.config = config

  def close(self):
    self.driver.quit()
  
  def getLoginPage(self):
    self.driver.get("https://vithas.es/area_privada/login-y-registro/login")  
  
  def login(self):
    WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.visibility_of_element_located((By.XPATH, "//input[contains(@name,\"Username\")]")))
    self.driver.find_element(By.XPATH, "//input[contains(@name,\"Username\")]").send_keys(self.config["site"]["user"])
    self.driver.find_element(By.XPATH, "//input[contains(@name,\"Password\")]").send_keys(self.config["site"]["password"])
    #self.driver.find_element(By.CSS_SELECTOR, "label:nth-child(2)").click() # Remember-me in this device ?
    self.driver.find_element(By.ID, "LoginButton").click()
  
  def pedirCitaClick(self):
    self.waitForAndClickElementById("/area_privada/inicio/pedir-cita")
  
  def misCitasClick(self):
    self.waitForAndClickElementByXpath("//span[text()='MIS CITAS']")
    self.waitForAndClickElementByXpath("//span[text()='VER TODAS']")
    self.waitForByXpath("//h1[contains(text(),'Mis citas')]")
  
  def vithasComboBoxWithSpan(self, spanId, value):
    comboXpath = "//span[@id='{}']".format(spanId)
    self.vithasComboBox(comboXpath, value)
  
  def vithasComboBoxNoSpan(self, comboId, value):
    comboXpath = "//select[@id='{}']/following-sibling::span[@class='custom-combobox']/input".format(comboId)
    self.vithasComboBox(comboXpath, value)
  
  def vithasComboBox(self, comboXpath, value):
    WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.element_to_be_clickable((By.XPATH, comboXpath)))
    WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.invisibility_of_element_located((By.ID, "lightboxContent")))
    WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.invisibility_of_element_located((By.ID, "divLightBox")))
    self.driver.find_element_by_xpath(comboXpath).click()
    input_element=self.driver.switch_to.active_element
    self.sendToAutoCompleteBox(input_element, value)
  
  def waitForByXpath(self, elementXpath):
    WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.element_to_be_clickable((By.XPATH, elementXpath)))
  
  def waitForById(self, elementId):
    WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.element_to_be_clickable((By.ID, elementId)))
  
  def waitForAndClickElementById(self, elementId):
    self.waitForById(elementId)
    self.driver.find_element_by_id(elementId).click()
  
  def waitForAndClickElementByXpath(self, elementXpath):
    self.waitForByXpath(elementXpath)
    self.driver.find_element_by_xpath(elementXpath).click()
  
  def formularioCitaSiguienteAndWaitNextPage(self):
    self.waitForAndClickElementByXpath("//a[@title='Siguiente']")
    WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.url_contains("/seleccionar-hora"))
  
  def confirmarCita(self):
    self.waitForAndClickElementByXpath("//input[contains(@value,'CONFIRMAR')]")
    #WebDriverWait(self.driver, DEFAULT_WAIT_MILLIS).until(expected_conditions.url_contains("/seleccionar-hora"))
  
  def notify(summary, body=""):
    subprocess.call(['notify-send',summary,body])
  
  def formularioCitaSeleccionHospital(self):
    self.vithasComboBoxNoSpan('ComboLocalidades', 'Castell')
    self.vithasComboBoxNoSpan('ComboCentros', 'Castell')
  
  def formularioCitaCardiologia(self):
    self.vithasComboBoxNoSpan('ComboEspecialidad', 'Cardiolog')
    self.vithasComboBoxWithSpan('Aseguradoras', 'Asisa')
    self.vithasComboBoxNoSpan('ComboProfesional', 'Carlos')
    self.vithasComboBoxNoSpan('ComboPrestacion', 'Consulta')
  
  def formularioCitaUrologia(self):
    self.vithasComboBoxNoSpan('ComboEspecialidad', 'Urolog')
    self.vithasComboBoxWithSpan('Aseguradoras', 'Asisa')
    #self.vithasComboBoxNoSpan('ComboProfesional', 'Mestre')
    self.vithasComboBoxNoSpan('ComboProfesional', 'Persiva')
    self.vithasComboBoxNoSpan('ComboPrestacion', 'Consulta')
  
  def formularioCitaOtorrino(self):
    self.vithasComboBoxNoSpan('ComboEspecialidad', 'Otorrino')
    self.vithasComboBoxWithSpan('Aseguradoras', 'Asisa')
    #self.vithasComboBoxNoSpan('ComboProfesional', 'Colomer')
    self.vithasComboBoxNoSpan('ComboProfesional', 'Guiral')
    self.vithasComboBoxNoSpan('ComboPrestacion', 'Consulta')
  
  def sendToAutoCompleteBox(self, element, string):
    element.send_keys(Keys.CONTROL + "a")
    element.send_keys(Keys.DELETE)
    element.send_keys(string)
    element.send_keys(Keys.DOWN)
    # TODO Quick and Dirty patch (Urología VS Neurología which appears before)
    # Fix this by catching the value of the select element, and press down while if it is not equals to the passed string
    if (string.startswith("Urolog")):
      element.send_keys(Keys.DOWN)
    element.send_keys(Keys.ENTER)
  
  def d(self):
    return self.driver
  
  def run(self):
    self.getLoginPage()
    self.login()
    #self.pedirCitaClick()
    #self.formularioCitaSeleccionHospital()
    #self.formularioCitaUrologia()
    #self.formularioCitaSiguienteAndWaitNextPage()
    #self.confirmarCita()
    self.misCitasClick()

class overlay_dissapeared(object):
  """An expectation for checking that an element has a particular css class.
  
  locator - used to find the element
  returns the WebElement once it has the particular css class
  """
  def __init__(self, locator):
    print("Initiated...")
    self.locator = locator
  
  def __call__(self, driver):
    print("Finding element: {}".format(self.locator))
    try:
      element = driver.find_element(*self.locator)   # Finding the referenced element
    except:
      print("Error finding element: {}".format(sys.exc_info()[0]))
      return True
    print("Element: {}".format(element))
    if (element):
      return False
    else:
        return True


with open("/home/rmartinez/NODROPBOX/bot-vithas.yaml", 'r') as stream:
    try:
        config = yaml.load(stream)
    except yaml.YAMLError as exc:
        print(exc)
        exit()


bot = VithasBot(config)
bot.run()


def notify(summary, body=""):
  subprocess.call(['notify-send',summary,body])

notify("bot-vithas", "Process completed")
#bot.close()
